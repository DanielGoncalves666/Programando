package sistema;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 */
public class sistema extends javax.swing.JFrame {

    private ArrayList<vaga> estacionamento = new ArrayList<>();
    private HashMap<String,usuario> users = new HashMap<>();
    private HashMap<String,carro> registroCarros = new HashMap<>();

     /**
     * Creates new form sistema
     */
    public sistema() {
        initComponents();
        
        lerVagas(estacionamento);
        lerUsers(users);
        lerCarrosRegistrados(registroCarros);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RegistrarLabel = new javax.swing.JLabel();
        BotaoRegistrar = new javax.swing.JButton();
        PagarLabel = new javax.swing.JLabel();
        Pagar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Administração de Estacionamento");

        RegistrarLabel.setText("Registrar uso de vaga");

        BotaoRegistrar.setText("Registrar");
        BotaoRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoRegistrarActionPerformed(evt);
            }
        });

        PagarLabel.setText("Pagar estacionamento");

        Pagar.setText("Pagar");
        Pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RegistrarLabel)
                    .addComponent(PagarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotaoRegistrar)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Pagar)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoRegistrar)
                    .addComponent(RegistrarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PagarLabel)
                    .addComponent(Pagar))
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotaoRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoRegistrarActionPerformed
        registro r = new registro(this);
        r.setVisible(true);
    }//GEN-LAST:event_BotaoRegistrarActionPerformed

    private void PagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PagarActionPerformed
        pagamento p = new pagamento(this);
        p.setVisible(true);
    }//GEN-LAST:event_PagarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sistema().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoRegistrar;
    private javax.swing.JButton Pagar;
    private javax.swing.JLabel PagarLabel;
    private javax.swing.JLabel RegistrarLabel;
    // End of variables declaration//GEN-END:variables

    public static void lerVagas(ArrayList<vaga> e)
    {
        String nomeArquivo = "vagas.txt";
        BufferedReader arquivo;
        String linha;
        String vetor[];
        boolean ehVip;
        
        try
        {
            arquivo = new BufferedReader(new FileReader(new File(nomeArquivo)));
            
            while((linha = arquivo.readLine()) != null)
            {
                vetor = linha.split(" ");
                ehVip = vetor[1].equalsIgnoreCase("VIP");
                      
                vaga nova = new vaga(Integer.valueOf(vetor[0]),ehVip,vetor[2].charAt(0),Double.valueOf(vetor[3]));
            
                e.add(nova);
            }
            
            arquivo.close();
        }
        catch(java.io.IOException ex)
        {
            System.out.println("File error:" + ex.getMessage());
        }
    }
    
    public static void lerUsers(HashMap<String,usuario> u)
    {
        String nomeArquivo = "usuarios.txt";
        BufferedReader arquivo;
        String linha;
        String aux = "";
        String vetor[];
        
        try
        {
            arquivo = new BufferedReader(new FileReader(new File(nomeArquivo)));
            
            while((linha = arquivo.readLine()) != null)
            {
                usuario novo;
                String nome = linha;
                
                linha = arquivo.readLine();
                vetor = linha.split(" ");
                String CPF = vetor[0];
                boolean VIP = "VIP".equals(vetor[1]);
                
                linha = arquivo.readLine();
                while(linha != null && !linha.isEmpty())
                {
                    aux = aux + ":" + linha;
                    linha = arquivo.readLine();
                    System.out.println();
                }
                
                vetor = aux.split(":");
                novo = new usuario(nome,CPF, VIP, vetor);
                
                u.put(CPF, novo);
            }
        }
        catch(java.io.IOException ex)
        {
            System.out.println("File error:" + ex.getMessage());
        }
    }
    
    public static void lerCarrosRegistrados(HashMap<String,carro> r)
    {
        String nomeArquivo = "carros.txt";
        BufferedReader arquivo;
        String linha;
        String vetor[];
        
        try
        {
            arquivo = new BufferedReader(new FileReader(new File(nomeArquivo)));
            
            while((linha = arquivo.readLine()) != null)
            {
                if(linha.isEmpty())
                    continue;
                
                vetor = linha.split(" ");
                                     
                carro novo = new carro(vetor[0],vetor[1],Integer.valueOf(vetor[2]));
                String nomeCompleto = vetor[0] + " " + vetor[1];
                
                r.put(nomeCompleto, novo);
            }
            
            arquivo.close();
        }
        catch(java.io.IOException ex)
        {
            System.out.println("File error:" + ex.getMessage());
        }
    
    }

    public boolean isUsuarioRegistrado(String cpf)
    {
        String [] vetor = users.keySet().toArray(new String[0]);
        
        for(String c : vetor)
        {
            if(c.equals(cpf))
                return true;
        }
        
        return false;
    }
    
    public usuario getUsuario(String CPF)
    {
        return users.get(CPF);
    }
    
    public int getCategoriaCarro(String nome)
    {
        
        if(registroCarros.containsKey(nome))
        {
             return registroCarros.get(nome).getCategoria();
        }
        else
            return -1;
    }
    
    public String[] getVagasDisponives(int categoria, boolean ehVip)
    {
        ArrayList<String> vagas = new ArrayList<>();
        String va;
        
        int i = 0;
        for(vaga v : estacionamento.toArray(new vaga[0]))
        {
            if(v.getCategoria() != categoria)
            {
                i++;
                continue;
            }
            
            if(!v.isOcupada())
            {
                if(ehVip)// o VIP pode estacionar em vaga normal ou vip
                {
                   va = i + v.getVisualizacao();
                   vagas.add(va);
                }
                else if(!v.isVIP())
                {
                    va = i + v.getVisualizacao();
                    vagas.add(va);
                }         
            }            
            
            i++;
        }
        
        return vagas.toArray(new String[0]);
    }
    
    public void ocuparVaga(int index, data d)
    {
        estacionamento.get(index).setOcupada(true);
        estacionamento.get(index).setData(d);
    }
    
    public void desocuparVaga(int index)
    {
        estacionamento.get(index).setOcupada(false);
        estacionamento.get(index).setData(null);
    }
    
    public vaga getVaga(int index)
    {
        return estacionamento.get(index);
    }
}
