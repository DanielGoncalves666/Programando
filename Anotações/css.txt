--------------------------------------- Geral ---------------------------------------------


<link href="style.css" rel="stylesheet"/>
Para incluir um arquivo css no HEAD do arquivo html.

/* */ --> comentários

@import 'link'; --> importa algo

------------------------------------ Cascata ---------------------------------
---- Origem
Ordem de prioridade:
	inline
	style tag
	link
	
Além disso, considera a última configuração

---- Especificidade
	Cálculo matemática, onde cad atipo de seletor e orgem do estulo possui valores a serem considerados. O maior valor é o que é aplicado.
	
0. operador universal
1. element type selector
10. classes (10 classes para sobreescrever um ID)
100. ID
1000. inline

body h1{ --> soma 2

}

#id h1 { --> soma 101

}

---- Regra !important
	Evitar o uso, quebra o fluxo natural da cascata
	
h1{
	color: blue !important; --> força a aplicar 
}

--------------------------------- Seletores ----------------------------
id's --> usados para realizar a decoração de UM elemento por meio do css.
	Exemplo:  <p id="um"></p>
	
	No arquivo css:
		#um{
		
		}
	
--------
classes --> usadas para realizar a decoração de dois ou mais elementos por meio do css.
	Exemplo: <p class="dois"><p>
	
	No arquivo css:
		.dois{
		
		}
		
--------
O * indica todos os elementos do arquivo html.

	No arquivo css:
	*{
	
	}
	
	
------------------------------------------ Unidades ---------------------------------------

--- Tipos numéricos

<integer> - número inteiro como -10 ou 223
<number> - número decimal como -2.4, 64 ou 0.234
<dimension> - é um <number> com uma unidade junto: 90deg, 2s, 8px
<percentage> - representa uma fração de outro número: 50%

------- Distâncias absolutas <length>
	São fixas e não alteram o seu valor.
	
Unidades:
cm 
in --> nem in nem cm são recomendadas
px (pixel) --> mais usada



------- Distâncias relativas
	São relativas a algum outro valor (elemento pai, root ou tamanho da tela)
	
	Benefício: maior adaptação aos diferentes tipos de tela.

Unidades:
em --> tamanho da font do pai
rem --> tamanho da font do elemento root (html)
vw --> 1% da viewport (tela) width
vh --> 1% da viewport height
	
------- Porcentagens
	Em muitos casos é tratado da msma maneira que as distâncias <length>
	Sempre será relativo a algum valor.
	
	
------- Posições
	<position>
	
	Representa um conjunto de coordenadas 2D:
		top, right, bottom, left, center
		
	Usado para alguns tipos de propriedades
	Não CONFUNDIR com a propriedade 'position'
	
------- Funções
	rgb() --> cor
	hsl() --> cor
	url() --> buscar imagem e trazer
	calc() --> calcula tamanhos
	
-------------------------------------- Box Model -----------------------------------------

É uma caixa retangular, possuindo propriedades de uma caixa.	
	
Tamanho (largura x altura) → width | height (são aplicados ao conteúdo, não incluindo padding, margin ou border)

Conteúdo → content

Bordas → border
	border: largura estilo cor       --> define três propriedades de uma borda simultaneamente.
		border-width
		border-style
		border-color
	outline 
		Difere em 4 sentidos:
			não modifica o tamanho da caixa (sendo border-box ou não)
			poderá ser diferente de retangular
			não permite ajustes individuais
			mais usado pelo user agent para acessibilidade
	
		
Preenchimento interno → padding --> é o espaço que separa o conteúdo da borda (espaço interno)

Espaços fora da caixa → margin --> é o espaço que separa a borda de outros elementos. (espaço externo)
	margin collapsing --> ocorre em elementos block. Se houver margin-top de 8px e um margin-botton de 8px em outro elemento, a margin final será de 8px
				valor auto --> faz calculo automático, apenas nas laterais
		no caso de elementos inline, os valores dar margens laterais são somados.

	
----
box-sizing: content-box | border-box
	content-box: considera apenas o conteúdo para a definição da altura e largura da caixa.
	border-box: considera até a borda	
	
----
display --> especifica o tipo de caixa de renderização usada por um elemento.
							Como as caixas se comportam em relação às outras caixas (comportamento externo das caixas)
	block --> mostra o elemento como um elemento bloco (começa uma nova linha, e toma toda a largura).
		width e height são respeitados
		padding, margin, border irão funcionar normalmente
			exemplos: <p>, <div>, <section>
	inline --> mostra o elemento como um elemento inline (não começa uma nova linha, e ocupa apenas sua largura).	
		width e height não funcionam
		somente valores horizontais de margin, padding e border
			exemplos: <a>, <strong>, <span>
	none --> o elemento é removido
	
		Posicionamento dos elementos dentro da caixa. Acima, posicionamento das caixas em relação às outras.
	flex --> flexbox
	grid --> mostra o elemento como um grid container.
	
------------------------------------------ Cores -------------------------------------------	
Tipos:

background-color: cor de fundo (para caixas)
color: cor do texto (para textos)
border-color: cor da borda (para caixas)	

---- RGB
	Podemos usar RGB de duas maneiras:
		- Hexadecimal:
			#000000aa --> onde aa indica transparência
			(red, green, blue) --> dois dígitos para cada cor
		- Função rgb()
			rgb( red, green, blue, alpha) --> numeros 0-255, alpha é a transparência e aceita porcentagem (opcional)
			
---- HSL
	Hue, Saturation, Lumience
		
	Função hsl(ângulo, saturação, luz, alpha):
		ângulo: 0 - 360
			0 - vermelho
			120 - verde
			240 - azul
		saturação: 0% - 100% (maior força da cor)
		luz: 0% - 100% (fica branco)
		alpha: transparência (opcional) 

---- Global Values

color: inherit; --> herda a cor do elemento anterior
color: initial; --> volta à cor original
color: unset; --> não definindo cor, pega do contexto

-------------------- Background ----------------------
	Define fundo para um elemento.
	Atua em block.
	Por padrão, é transparente.
	
---- background-color --> cor de fundo

---- background-image --> aplica uma imagem como background (podemos usar a função de url() para pegar a imagem)
		por padrão a imagem se repete
-- background-repeat --> define se a imagem se repete no background ou não
	no-repeat --> não repete
	repeat-y --> repete no eixo y
	repeat-x --> repete no eixo x
-- background-position --> permite mudar a posição da imagem
		primeiro horizontal e segundo vertical
-- background-size --> muda o tamanho da imagem
		contain: fica dentro dos limites do bloco
		cover: se estica e cobre todo o background
		podemos usar porcentagens. Primeiro valor se aplica à horizontal e o segundo à vertical
		podemos também usar valores quaisquer
-- background-origin --> define onde que a imagem começa
		border-box --> a imagem pode preencher as bordas
		content-box --> o padrão, apenas o conteúdo
		padding-box --> permite englobar o padding
-- background-clip --> mesma coisa que o origin, mas define tanto para a imagem como para a cor de fundo
-- background-attachment --> define se o background fica fixo ou se move com o scroll
		scroll --> padrão
		fixed --> fica fixo
		
A propriedade background é o shorthand de todas essas.

A cor de background engloba a borda também.

---- Gradient
	linear-gradient(ângulo, red, yellow) --> vai suavemente de vermelho para amarelo
		ângulo é opcional e define a direção
		podemos colocar mais cores
	radial-gradient(red, yellow) --> faz a mesma coisa, mas de forma circular
	
---- Múltiplos valores
	Podemos aplicar múltiplos backgrounds.
	na propriedade background basta separarmos por vírgula. Os backgrounds são aplicados na ordem em que aparecem.
	
----------------------------------------- Posicionamento -----------------------------------
position: relative | absolute | static | fixed | sticky
	Controlar onde, na página, o elemento irá ficar, alterando o fluxo normal dos elementos.

	static --> por padrão, todos os elementos são static. Os elementos simplesmente irão seguir o fluxo normal da página.	
		A única boa razão para usar isso explicitamente é para remover um posicionamento previamente definido.
	relative --> mantém o fluxo normal da página, mas permite alterar a localização do bloco em relação a si mesmo
		left, right, top, bottom, z-index
	
	absolute --> retira o elemento do fluxo normal da página, o colocando em um novo fluxo. Seu posicionamento é referente ao elemento pai ( se o elemento pai não for static).
		left, right, top, bottom, z-index
		
	fixed --> retira o elemento do fluxo normal da página, o colocando em um novo fluxo. A diferença com o absolute é que o elemento fica fixo, mesmo com scroll.
		left, right, top, bottom, z-index

---- Element stacking
	Possível por meio da propriedade z-index
	Por padrão, o último elemento do fluxo html é o que fica mais em cima.
		Quando usamos o z-indez, o elemento com z-index maior é que ficará acima e os outros seguirão em ordem decrescente.
		
---------------------------------------- Flexbox ---------------------------------------------
	Nos permite posicionar elementos dentro de uma caixa. Horizontal ou vertical
	
	Posicionamento horizontal --> eixo principal.
	Posicionamento vertical --> eixo cruzado.
		Por padrão, esses são os eixos. O uso de flex-direction: column muda o eixo principal para a vertical.
	
	
	
	Para usá-lo colocamos display: flex 	
			no elemento pai. As seguintes propriedades podem então ser especificadas.
				:- flex-direction --> direção do flex
					row --> eixo principal horizontal. Valor padrão.
					column --> eixo principal vertical.
					reverse-row --> eixo principal horizontal. Os elementos vão estar de trás para frente, do outro lado da caixa.
					reverse-column --> eixo principal vertical. Os elementos vão estar de trás para frente. Devemos prestar atenção na altura da caixa, pois se ela não for grande não teremos a impressão que os filhos estão do outro lado.
				
				:- flex-wrap --> capacidade do flex de usar múltiplas linhas. Cada nova linha é como se fosse um novo eixo principal. Se a caixa tiver o tamanho suficiente para acomodar todos os elementos, eles permanecerão em uma mesma linha.
						wrap: Se não for o caso, uma nova linha é criada e os elementos do final colocados nela. 
						wrap-reverse: inverte a ordem de apresentação. Linhas quebradas ficarão em cima.
				
				:- flex-flow --> é um shorthand (flex-direction || flex-wrap)
				
				:- justify-content (alinhamento no eixo principal) --> alinhamento dos elementos dentro do container, além de sua distribuição. No caso de orientação no eixo das colunas, as propriedades se aplicam da mesma maneira. Mas deve-se atentar com a altura do container.
					flex-start: valor padrão. Os elementos ficam todos no início do eixo principal, um ao lado do outro.
					flex-end: Os elementos ficam no final do eixo principal, um ao lado do outro e na mesma ordem.
					center: Os elementos ficam no centro do eixo principal, um ao lado do outro.
					space-around: Os elementos terão espaços iguais entre eles. Além de um pequeno espaço antes do primeiro e depois do último elemento.
					space-between: os elementos terão espaços iguais entre eles, apenas.
					space-evenly: o espaço entre elementos, antes do primeiro e depois do último é igual.
				
				:- align-items (alinhamento no eixo cruzado)
					 	stretch: valor padrão (itens esticados(stretch) no eixo cruzado.
					 	flex-start: elementos no ínicio do eixo cruzado			 	
					 	flex-end: elementos no fim do eixo cruzado
					 	center: elementos ao centro do eixo cruzado
				
				:- gap --> espaço entre elementos. (não considera espaços antes ou depois)
					medidas numéricas
				
------- Propriedades para os itens (filhos) dentro de um flex.

flex-basis --> largura ou altura ocupada do container
	auto: utiliza a largura ou altura do elemento como base (depende do eixo principal)
	outros valores numéricas: estabelece um valor númerico
		
flex-grow --> O crescimento do item dentro do container em relação aos espaços vazios.
	O valor 0 é o padrão, ou seja, ele não cresce nos espaços vazios.
	O espaço vazio é dividido entre os itens com flex-grow diferente de 0 proporcionalmente com o valor da propriedade.
	
flex-shrink --> o encolher do item dentro do container
	0: não encurtar mais, ocupa o tamanho que é estabelecido para ele.
	1: encurta o elemento para o espaço disponível para ele, considerando os outros itens. (padrão para todos os itens)
	Valore maiores significam que um item irá encolher mais que os demais.

flex --> shorthand
	flex-grow || flex-shrink || flex-basis
	
order --> ordenar itens dentro de um flex
	0 --> padrão.
	O valor maior é que aparece por último.
				
--------------------------------------- Grid -------------------------------------
	Assim como o flex, faz o posicionamento dos elementos dentro de uma caixa.
	Posicionamento horizontal e vertical ao mesmo tempo. (diferentemente do flex)
	Pode ser flexível ou fixo.
	Cria espaços para os elementos filhos habitarem.
	
	Aplicamos o grid ao pai dos elementos.
		display: grid;
	
	
grid-template-areas --> define as areas. Cada aspas duplas significa uma linha e dentro colocamos as colunas. (colocamos no elemento pai)
Exemplo:
	"header header"
	"main aside"
	"footer footer" --> podemos dar nome para as colunas	

	grid-area: nome_da_coluna; --> colocamos no elemento filho, onde nome_da_coluna foi definido na propriedade acima.
	
grid-template-rows --> determina o tamanho das linhas
grid-template-columns --> determina o tamanho das colunas
	podemos usar 1fr(fração) para indica o tamanho (tudo que resta). Além disso, é uma medida flexível.
	repeat(numero_vezes, tamanho)


Podemos usar o grid e o flex juntos, mas não no mesmo elemento.
	
-------------------------------------- Fontes -------------------------------------
	Propriedades básicas sobre fontes:

font-family --> tipo de fonte de um elemento.
				lista as fontes em ordem de prioridade
				inclui um fallback(escape, caso não encontre as fontes)
font-weight --> peso da fonte (dependendo da família da fonte, não dá pra usar todos os pesos)
font-style --> estilo da fonte (itálico, normal, oblique, etc) (também depende da família)
font-size --> tamanho da fonte

Outros:
font-variant --> variações da fonte
font-stretch --> alargamento ou encolhimento da fonte

letter-spacing --> define o espaçamento entre os caracteres
word-spacing --> define o espaçamento entre palavras
line-height --> espaçamento entre linhas

text-transform --> capitalize | uppercase | lowercase | none
text-decoration --> aparência decorativa do texto
	line - underline | overline | line-through
	styles
	color
	
text-align --> center | right | justify | left
text-shadow --> sombra

-------------------------------------- Seletores --------------------------------------------
	Conecta um elemento html com o CSS a fim de alterar o elemento
	
------ Tipos

Element Selector - aplicável a todos os elementos html
	h1{
	
	}
	
ID Selector - elementos que tenham um atributo `ID`. Cada ID deve ser único.
	#nomeID {
	
	}

Class Selector - elementos que tenham um atributo `class`. Múltiplos elementos podem ter a mesma classe.
	.nomeClasse{
	
	}
	
Attribute Selector - um elemento que tenha um determinado atributo
	[title] {
	
	}
	
	Podemos especificar um valor para o atributo:
	
	[class="red"]{
	
	}
	
Pseudo-class Selector - elementos que tem um estado específico.
	p:hover{	--> hover é quando o mouse está em cima
	
	}
	
	Múltiplos seletores podem ser aplicados por meio da separação por vírgula
	
------------------------------- Combinadores --------------------------------------------
	Trabalham para buscar e combinar seletores a fim de aplicar uma estilização
	
------ Descendent Combinator
	Identificado por um espaço entre os seletores.
	Busca um elemento dentro do outro.
	
	body article h2{
	
	}
	
	Buscará:
	
	<body>
		<article>
			<h2>
			
			</h2>
		</article>
	</body>

	Mesmo que haja outros elementos no meio do caminho (por exemplo, entre body e article, as mudanças são aplicadas.
	
	body>
		<div>
			<article>
				<h2>
				
				</h2>
			</article>
		</div>
	</body>
	Também aplica as mudanças.
	
------ Child Combinator
	Identificado pelo sinal `>` entre dois seletores
	Seleciona somente o elemento que é filho direto do pai
	Elementos depois do filho direto serão desconsiderados
	
	body > ul > li{
	
	}

	Quando colocamos um elemento no "meio", deixa de aplicar as mudanças
	
------ Adjacent Sibling Combinator
	Identificado pelo sinal de `+` entre dois seletores.
	Seleciona somente o elemento do lado direito que é irmão direto na hierarquia
	
	h1 + p{
	
	}
	
	No exemplo a seguir, as mudanças seriam aplicadas apenas no primeiro parágrafo, pois é ele o irmão direto de h1.
	
	<body>
		<h1></h1>
		<p></p> --> aplica somente nele
		<p></p>
	</body>

------- General Sibling Combinator
	Identificado pelo sinal `~` entre dois seletores.
	Seleciona todos os elementor irmãos.
	
	h1 ~ p{
	
	}
	
	No exemplo a seguir, as mudanças são aplicadas em todos os parágrafos.
	
	<body>
		<h1></h1>
		<p></p>
		<p></p>
	</body>
	
------------------------------------------ Pseudo-Classes --------------------------------------
	Tipo de seletor que irá selecionar um elemento que estive em um estado específico. 
	Pseudo-elementos começam com 2 pontos seguidos do nome da pseudo classe.
	:pseudo-class-name
	
-------- :first-child 
	Aplica apenas ao primeiro elemento filho.

	ul li:fisrt-child{
	
	}
	Primeiro filho de ul que seja li. Caso o primeiro filho não seja li, não aplica
	
-------- :nth-of-type(n-elemento)
	Seleciona o n-th elemento de um dado tipo
	
	article p:nth-of-type(2){
	
	}
	Seleciona o segundo elemento p de article.
	
-------- :nth-child(n-elemento)
	
	article p:nth-child(4){
	
	}
	Aplica se o quarto filho de um article for um parágrafo.

	n-elemento = odd
		Aplica nos filhos ímpares
	n-elemento = even
		Aplica nos filhos pares
		
-------- :hover
	Mouse em cima

-------- :focus
	Elemento em foco. Usado muito para inputs.
	
-------- :disabled
	Quando o elemento por disabled. (input, por exemplo)
	
-------- :required
	Quando o elemento for obrigatório (input, por exemplo)

https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	Outras pseudo-classes
	
----------------------------------------- Pseudo-Elements ----------------------------
	Podemos  adicionar elementos HTML pelo próprio CSS
	
	::pseudo-element-name
	
-------- ::before
	Precisa ter uma propriedade content.
	Coloca o que estiver em content antes do que está no elemento
-------- ::after
	Precisa ter uma propriedade content.
	Coloca o que estiver em content depois do que está no elemento 
---------::first-line
	Aplica a primeira linha do elemento.
	Útil para <p>

https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	Outros pseud-elements


