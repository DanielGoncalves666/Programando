sudo apt install git --> instala o git na máquina linux

git --global user.name --> retorna o nome de usuário
	git config --global user.name "usuario" -->configura o nome do usuario
git --global user.email --> retorna o email do usuário
	git config --global user.email "email" --> configura o email


git version --> verifica a versão atualmente instalada
git log --> retorna as informações dos commits realizados
	git log --oneline -->informações enxutas e em apenas uma linha
	git log --graph --> mostra o grafo de commits


git init --> cria um repositório local
git add --> adciona arquivos e pastas que foram alterados em um "contêiner"
	git add . ou git add * --> adiciona todos os arquivos
git status --> verifica o que está armazenado no "contêiner"
git commit --> identifica e armazena o "contêiner" no repositório local
	git commit -m "comentário" --> para criar um commit
	git commit -am "comentario" --> faz a operação do git add e cria um commit novo.
	git commit --amend --> to change name of a commit
**commit é um comentário que escrevemos sempre que fazemos uma alteração no projeto.

git branch --> indica o ramo que o projeto se encontra


Para recuperar informações de uma versão antiga
	git checkout sequencia_inicial_do_commit
		ex: git checkout 8431b83
		
Para retornar para a última versão 
	git checkout master
	
git diff --> mostra as mudanças realizadas nos arquivos

Para descartar mudanças que foram feitas:
	git checkout nome_do_arquivo
	Caso as alterações já tenham sido commitadas, não será possivel.

Neste caso, temos que usar o seguinte comando para remover as mudanças do contêiner
	git reset HEAD --> para todos os arquivos
	git reset HEAD arquivo
	
Para remover um commit e voltar ao anterior:
	git reset --hard hash_anterior
	
	O comando --hard remove as alterações no diretorio
	
	
RAMIFICAÇÕES

git branch --> exibe a branch atual

git checkout -b nome_da_nova_branch --> para criar um novo ramo no projeto
Assim que criarmos um commit, ele será associado com estre novo ramo.

git checkout nome_da_branch --> para mudar de ramo

git log --oneline --graph --all --> para mostrar o grafo de todos os ramos

Para fundir um ramo com o ramo master:
	git merge nome_do_ramo
		Caso existirem conflitos, é necessário resolvê-los antes de prosseguir.
		O próprio GIT mostrará aonde está o conflito.
		
	Quando os conflitos tiverem sido resolvidos
		git add .
		git commit -m nome
		
		
no GITHUB

git remote --> verifica se exite um repositório remoto
git remote -v --> mostra detalhes de um repositório remoto

git remote add origin https://github.com/DanielGoncalves666/Teste.git   --> faz a ligação com o repositório remoto
git push -u origin master --> enviar para o repositorio remoto
	-u  de upstream
	origin é o repositório remoto
	master é o repositório local
		
			


- - - - - - - - - GITHUB - - - - - - - - - - -
Para clonar um repositório do GitHub para a nossa máquina local, precisamos do link obtido em "clone ou download":
	https://github.com/DanielGoncalves666/Teste.git --> como esse
	
Usamos então o seguinte comando na pasta onde queremos que o repositório seja clonado
	git clone https://github.com/DanielGoncalves666/Teste.git
	
Agora o git já passa a fazer o controle de versionamento normal
	Agora é possível usar os comandos básicos
	
git push --> para enviar ao GitHub quaisquer mudanças realizadas no repositório

Para sincronizar mudanças feitas no GitHub com o repositorio local
	git pull
	
	
Devido ao uso em diversos lugares de um mesmo repositório, pode ocorrer de existir mudançar em um que não estão no outro, mas que estão
no repositório remoto. Se isso ocorre, será impossivel enviar mudanças por meio do git push
	
	git fetch -->mostra as alterações feitas no repositório remoto
	
	git checkout origin --> acessa o último commit feito no repositório remoto
		origin pode ser sobstituido pelo branch

	git pull --> irá unir o repositório remoto com o local
	
Resolvemos os conflitos, fazemos um novo commit e mandamos de volta
	git push
